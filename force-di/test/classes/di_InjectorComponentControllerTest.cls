/**
 * Copyright (c) 2018, Andrew Fawcett
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the Andrew Fawcett, nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **/
/**
 * Modifications:
 *  B Anderson - Updated Unit Tests ( needing >75% overall)
 */ 
@IsTest
private class di_InjectorComponentControllerTest {

    @isTest
    static void givenWrongBindingNameValueWhenGetInjectThenThrowException(){
        //given
        di_InjectorComponentController newObj = new di_InjectorComponentController();
   
        try {
            //When
            newObj.getInject();
        } catch(Exception e) {
            //Then
            Assert.areEqual(e.getMessage().contains('List index out of bounds'), true, 'Correct exception is not thrown');
        }
    }

    @isTest
    static void givenFlowNameWhenGetInjectorFlowProxyInstanceThenMethodCall(){
        di_InjectorComponentController newObj = new di_InjectorComponentController();
        Object result= newObj.getInjectorFlowProxyInstance('HelloWorld', 'Account');
        //Then
        Assert.isInstanceOfType(result, Component.di_injectorFlowProxy.class );

    }

    @isTest
    static void givenApexPageComponentGetInjectorIsValid() {
        // Given
        final String BINDING_NAME = 'myapexpage_cmp';
        di_InjectorComponentController newObj = new di_InjectorComponentController();
        newObj.BindingNameValue=BINDING_NAME;
     
        Component.Apex.PageBlock pageBlk = new Component.Apex.PageBlock();
        di_Injector.Org.Bindings.set(new di_Module()
                                     .visualforceComponent()
                                     .bind(BINDING_NAME)
                                     .toObject(pageBlk));
        //When

        Object result= newObj.getInject();
        //Then
        Assert.areNotEqual(null, result );
        Assert.isInstanceOfType(result, Component.Apex.Pageblock.class);
    }

    @isTest
    static void givenLightningComponentGetBindingId() {
        // Given
        final String BINDING_NAME = 'myapexpage_cmp';
        final String BINDING_ID = 'myapexpage_id';
        // When
        di_InjectorComponentController newObj = new di_InjectorComponentController();
        newObj.BindingNameValue=BINDING_NAME;
        newObj.BindingIdValue=BINDING_ID;
   
        //Then
        Assert.areEqual( BINDING_ID,newObj.BindingIdValue);
        Assert.areEqual( BINDING_NAME,newObj.BindingNameValue);

    }

}
